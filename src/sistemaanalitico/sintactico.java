
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sistemaanalitico;

import java_cup.runtime.Symbol;
import java.util.Vector;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\005\000\002\005\010\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\015\005\000\002\015\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\011" +
    "\000\002\017\005\000\002\017\005\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\011\013" +
    "\000\002\013\003\000\002\013\010\000\002\014\010\000" +
    "\002\014\007\000\002\012\017" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\004\004\001\002\000\010\003\012\023" +
    "\015\043\016\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\012\003\012\004\ufffe\023\015\043" +
    "\016\001\002\000\004\004\155\001\002\000\012\003\ufffb" +
    "\004\ufffb\023\ufffb\043\ufffb\001\002\000\004\005\153\001" +
    "\002\000\012\003\ufffd\004\ufffd\023\ufffd\043\ufffd\001\002" +
    "\000\012\003\ufffc\004\ufffc\023\ufffc\043\ufffc\001\002\000" +
    "\004\036\107\001\002\000\004\022\017\001\002\000\032" +
    "\006\021\007\026\010\027\011\020\012\032\013\033\014" +
    "\031\015\034\016\023\017\030\041\022\043\024\001\002" +
    "\000\032\006\021\007\026\010\027\011\020\012\032\013" +
    "\033\014\031\015\034\016\023\017\030\041\022\043\024" +
    "\001\002\000\032\006\021\007\026\010\027\011\020\012" +
    "\032\013\033\014\031\015\034\016\023\017\030\041\022" +
    "\043\024\001\002\000\034\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\022\uffdb\041\uffdb\043\uffdb\001\002\000\034\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\022\uffd7\041\uffd7\043\uffd7\001\002\000" +
    "\034\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\022\uffdc\041\uffdc\043" +
    "\uffdc\001\002\000\004\022\041\001\002\000\032\006\021" +
    "\007\026\010\027\011\020\012\032\013\033\014\031\015" +
    "\034\016\023\017\030\041\022\043\024\001\002\000\032" +
    "\006\021\007\026\010\027\011\020\012\032\013\033\014" +
    "\031\015\034\016\023\017\030\041\022\043\024\001\002" +
    "\000\034\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6\041\uffd6" +
    "\043\uffd6\001\002\000\034\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\022\uffd9\041\uffd9\043\uffd9\001\002\000\032\006\021\007" +
    "\026\010\027\011\020\012\032\013\033\014\031\015\034" +
    "\016\023\017\030\041\022\043\024\001\002\000\034\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\022\uffda\041\uffda\043\uffda\001" +
    "\002\000\034\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8\041" +
    "\uffd8\043\uffd8\001\002\000\032\006\021\007\026\010\027" +
    "\011\020\012\032\013\033\014\031\015\034\016\023\017" +
    "\030\041\022\043\024\001\002\000\034\006\uffe1\007\uffe1" +
    "\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\022\uffe1\041\uffe1\043\uffe1\001\002\000\034" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\022\uffdf\041\uffdf\043\uffdf" +
    "\001\002\000\034\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\022\uffdd" +
    "\041\uffdd\043\uffdd\001\002\000\006\025\043\031\042\001" +
    "\002\000\004\034\074\001\002\000\004\034\045\001\002" +
    "\000\006\005\056\022\060\001\002\000\004\041\046\001" +
    "\002\000\004\020\047\001\002\000\004\026\050\001\002" +
    "\000\004\020\051\001\002\000\004\027\052\001\002\000" +
    "\004\020\053\001\002\000\004\030\054\001\002\000\004" +
    "\035\055\001\002\000\006\005\uffd5\022\uffd5\001\002\000" +
    "\012\003\uffd4\004\uffd4\023\uffd4\043\uffd4\001\002\000\012" +
    "\003\uffe2\004\uffe2\023\uffe2\043\uffe2\001\002\000\004\024" +
    "\061\001\002\000\004\032\062\001\002\000\004\041\064" +
    "\001\002\000\004\033\072\001\002\000\004\022\065\001" +
    "\002\000\004\025\066\001\002\000\004\034\045\001\002" +
    "\000\004\005\070\001\002\000\006\033\uffd1\041\064\001" +
    "\002\000\004\033\uffd2\001\002\000\004\005\073\001\002" +
    "\000\012\003\uffd3\004\uffd3\023\uffd3\043\uffd3\001\002\000" +
    "\004\026\075\001\002\000\004\020\076\001\002\000\004" +
    "\027\077\001\002\000\004\020\100\001\002\000\004\030" +
    "\101\001\002\000\004\035\102\001\002\000\004\005\103" +
    "\001\002\000\012\003\uffd0\004\uffd0\023\uffd0\043\uffd0\001" +
    "\002\000\032\006\021\007\026\010\027\011\020\012\032" +
    "\013\033\014\031\015\034\016\023\017\030\041\022\043" +
    "\024\001\002\000\034\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\022" +
    "\uffe0\041\uffe0\043\uffe0\001\002\000\034\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\022\uffde\041\uffde\043\uffde\001\002\000\004" +
    "\043\110\001\002\000\004\022\111\001\002\000\040\005" +
    "\120\006\130\007\116\010\126\011\127\012\122\020\133" +
    "\032\112\033\131\034\117\035\115\036\114\037\124\040" +
    "\113\042\123\001\002\000\010\005\uffe4\020\uffe4\021\uffe4" +
    "\001\002\000\006\020\ufff1\021\151\001\002\000\010\005" +
    "\uffe7\020\uffe7\021\uffe7\001\002\000\010\005\uffec\020\uffec" +
    "\021\uffec\001\002\000\010\005\uffea\020\uffea\021\uffea\001" +
    "\002\000\010\005\uffed\020\uffed\021\uffed\001\002\000\010" +
    "\005\uffe6\020\uffe6\021\uffe6\001\002\000\004\005\150\001" +
    "\002\000\010\005\uffee\020\uffee\021\uffee\001\002\000\006" +
    "\020\ufff2\021\146\001\002\000\010\005\uffef\020\uffef\021" +
    "\uffef\001\002\000\006\020\ufff0\021\144\001\002\000\010" +
    "\005\uffeb\020\uffeb\021\uffeb\001\002\000\010\005\uffe5\020" +
    "\uffe5\021\uffe5\001\002\000\010\005\uffe8\020\uffe8\021\uffe8" +
    "\001\002\000\010\005\uffe3\020\uffe3\021\uffe3\001\002\000" +
    "\004\020\134\001\002\000\010\005\uffe9\020\uffe9\021\uffe9" +
    "\001\002\000\040\005\120\006\130\007\116\010\126\011" +
    "\127\012\122\020\133\032\112\033\131\034\117\035\115" +
    "\036\114\037\124\040\135\042\137\001\002\000\006\005" +
    "\ufff1\020\ufff1\001\002\000\004\005\ufff5\001\002\000\006" +
    "\005\ufff2\020\ufff2\001\002\000\006\005\ufff0\020\ufff0\001" +
    "\002\000\006\005\ufff3\020\142\001\002\000\040\005\120" +
    "\006\130\007\116\010\126\011\127\012\122\020\133\032" +
    "\112\033\131\034\117\035\115\036\114\037\124\040\135" +
    "\042\137\001\002\000\004\005\ufff4\001\002\000\034\005" +
    "\120\006\130\007\116\010\126\011\127\012\122\020\133" +
    "\032\112\033\131\034\117\035\115\036\114\037\124\001" +
    "\002\000\004\005\ufff8\001\002\000\004\042\147\001\002" +
    "\000\004\005\ufff6\001\002\000\012\003\ufff9\004\ufff9\023" +
    "\ufff9\043\ufff9\001\002\000\004\040\152\001\002\000\004" +
    "\005\ufff7\001\002\000\010\003\012\023\015\043\016\001" +
    "\002\000\012\003\ufffa\004\ufffa\023\ufffa\043\ufffa\001\002" +
    "\000\004\002\000\001\002\000\004\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\004\002\004\001\001\000\014\003\007\004" +
    "\006\005\013\010\012\012\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\155\004\006\005\013\010" +
    "\012\012\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\024\001\001" +
    "\000\004\017\105\001\001\000\004\017\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\037\001\001\000\004\017\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\043\001\001\000\004\013\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\066\001\001\000\002\001\001\000\004" +
    "\014\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\131\007\124\016\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\140" +
    "\007\137\015\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\140\007\137\015\142\001\001\000\002\001" +
    "\001\000\004\007\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\153\005\013\010\012" +
    "\012\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Errores Recuperables
    Vector recuperables = new Vector(10,50);
    Vector lineaRecuperables = new Vector (10,50);
    Vector columnaRecuperables = new Vector(10,50);
    // errores no recuperables
    Vector noRecuperables = new Vector(10,50);
    Vector lineaNoRecuperables = new Vector (10,50);
    Vector columnaNoRecuperables = new Vector(10,50);
    
    // elementos metodo thompson y cerradura
    Vector expresiones = new Vector(10,50);
    Vector nombreExpresiones = new Vector(10,50); 
    Vector elementosG = new Vector(10,50);

    // conjuntos
    Vector ConjExp = new Vector(10,50);

    //nombre de tokens
    Vector tokensName = new Vector(10,50);

/* Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
    System.out.println("Error en la Linea " + (s.right+1) + " Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    recuperables.addElement(s.value);
    lineaRecuperables.addElement(s.right+1);
    columnaRecuperables.addElement(s.left);
}

/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error irrecuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
    noRecuperables.addElement(s.value);
    lineaNoRecuperables.addElement(s.right+1);
    columnaNoRecuperables.addElement(s.left);
} 
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {

  int contador = 0; 



  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= tDoblePor EXP1 tDoblePor 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXP1 ::= EXP2 EXP1 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP1",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EXP1 ::= EXP2 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP1",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP2 ::= DEF 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP2 ::= CONJ 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXP2 ::= ERROR 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // EXP2 ::= error tPuntoComa EXP2 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONJ ::= tConj tDosPts tId tFlecha OPCONJ tPuntoComa 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Conjuntos B = (Conjuntos)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		B.nombre = A; ConjExp.addElement(B); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONJ",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPCONJ ::= ASCII tSeparadorC ASCII 
            {
              Conjuntos RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String B = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new Conjuntos(); RESULT.conjRaya.addElement(A); RESULT.conjRaya.addElement(B); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPCONJ ::= tLetra tSeparadorC tLetra 
            {
              Conjuntos RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String B = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new Conjuntos(); RESULT.conjRaya.addElement(A); RESULT.conjRaya.addElement(B); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPCONJ ::= tNumero tSeparadorC tNumero 
            {
              Conjuntos RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String B = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new Conjuntos(); RESULT.conjRaya.addElement(A); RESULT.conjRaya.addElement(B); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPCONJ ::= OPCONJ1 tComa OPCOMA 
            {
              Conjuntos RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Conjuntos B = (Conjuntos)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new Conjuntos(); RESULT.conjComa.addElement(A); for (int i = 0;i<B.conjComa.size(); i++ ) { if (!RESULT.conjComa.contains(B.conjComa.elementAt(i))) { RESULT.conjComa.addElement(B.conjComa.elementAt(i)); } }
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPCOMA ::= OPCONJ1 tComa OPCOMA 
            {
              Conjuntos RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Conjuntos B = (Conjuntos)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new Conjuntos(); RESULT.conjComa.addElement(A); for (int i = 0;i<B.conjComa.size(); i++ ) { if (!RESULT.conjComa.contains(B.conjComa.elementAt(i))) { RESULT.conjComa.addElement(B.conjComa.elementAt(i)); } }  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMA",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPCOMA ::= OPCONJ1 
            {
              Conjuntos RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new Conjuntos(); RESULT.conjComa.addElement(A); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMA",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPCONJ1 ::= tNumero 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ1",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPCONJ1 ::= tLetra 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ1",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPCONJ1 ::= ASCII 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ1",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASCII ::= tAscii 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASCII ::= tOr 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASCII ::= tParentesisA 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASCII ::= tParentesisC 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASCII ::= tPor 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASCII ::= tUnoMas 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASCII ::= tComa 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASCII ::= tConcatenacion 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASCII ::= tDosPts 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASCII ::= tPuntoComa 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASCII ::= tCeroUno 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASCII ::= tLlaveA 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASCII ::= tLlaveC 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEF ::= tId tFlecha REGULAR tFlecha tRetorno RETORNO FINAL 
            {
              String RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String B = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String C = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Def D = (Def)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 System.out.println(A.ExpReg.getClass()); expresiones.addElement(A.ExpReg); nombreExpresiones.addElement(B); elementosG.addElement(A.elementos); D.retXdef = C; tokensName.addElement(D); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEF",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // REGULAR ::= tOr REGULAR REGULAR 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Expresion B = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 OR nuevo = new OR(); RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; nuevo.transicion5=B.ExpReg; RESULT.ExpReg = nuevo; RESULT.copiar(A.elementos); RESULT.copiar(B.elementos); RESULT.addEG(A.ExpReg); RESULT.addEG(B.ExpReg); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // REGULAR ::= tConcatenacion REGULAR REGULAR 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Expresion B = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 CONCAT nuevo = new CONCAT(); RESULT = new Expresion(); nuevo.transicion1=A.ExpReg; nuevo.transicion2=B.ExpReg; RESULT.ExpReg = nuevo; RESULT.copiar(A.elementos); RESULT.copiar(B.elementos); RESULT.addEG(A.ExpReg); RESULT.addEG(B.ExpReg); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // REGULAR ::= tPor REGULAR 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 CEROMAS nuevo = new CEROMAS(); RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; RESULT.ExpReg = nuevo; RESULT.elementos = A.elementos; RESULT.addEG(A.ExpReg); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // REGULAR ::= tCeroUno REGULAR 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 CEROUNO nuevo = new CEROUNO(); RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; RESULT.ExpReg = nuevo; RESULT.elementos = A.elementos; RESULT.addEG(A.ExpReg); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // REGULAR ::= tUnoMas REGULAR 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 UNOMAS nuevo = new UNOMAS();   RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; RESULT.ExpReg = nuevo; RESULT.elementos = A.elementos; RESULT.addEG(A.ExpReg); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // REGULAR ::= tId 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // REGULAR ::= tCadena 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // REGULAR ::= tSaltoLinea 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // REGULAR ::= tComillaS 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // REGULAR ::= tTab 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REGULAR ::= tComillaD 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // REGULAR ::= tTodoV 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RETORNO ::= tParentesisA tCadena tComa tYyText tComa tYyRow tComa tYyCol tParentesisC 
            {
              String RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FINAL ::= tPuntoComa 
            {
              Def RESULT =null;
		RESULT = new Def(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FINAL ::= tFlecha tReserv tLlaveA CONTENIDO tLlaveC tPuntoComa 
            {
              Def RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Def A = (Def)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		RESULT = new Def(); RESULT = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONTENIDO ::= tCadena tFlecha tRetorno RETORNO tPuntoComa CONTENIDO 
            {
              Def RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String B = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Def C = (Def)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = new Def(); RESULT = C; RESULT.retRes.addElement(B); RESULT.texto.addElement(A); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONTENIDO ::= tCadena tFlecha tRetorno RETORNO tPuntoComa 
            {
              Def RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String B = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = new Def(); RESULT.retRes.addElement(B); RESULT.texto.addElement(A); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ERROR ::= tId tFlecha REGULAR tFlecha terrorM tParentesisA tYyText tComa tYyRow tComa tYyCol tParentesisC tPuntoComa 
            {
              String RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)).right;
		String B = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)).value;
		 System.out.print(A.ExpReg.getClass()); System.out.println(A.ExpReg); expresiones.addElement(A.ExpReg); nombreExpresiones.addElement(B); elementosG.addElement(A.elementos); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ERROR",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
