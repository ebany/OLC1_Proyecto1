
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sistemaanalitico;

import java_cup.runtime.Symbol;
import java.util.Vector;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\010\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\007\005\000\002" +
    "\007\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\011\000\002\017\005\000\002\017\005" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\013\013\000\002\014\003\000\002\014\010" +
    "\000\002\015\010\000\002\015\007\000\002\016\017" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\004\004\001\002\000\006\023\013\044" +
    "\014\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\010\023\013\025\ufffe\044\014\001\002\000" +
    "\004\025\141\001\002\000\010\023\ufffd\025\ufffd\044\ufffd" +
    "\001\002\000\010\023\ufffc\025\ufffc\044\ufffc\001\002\000" +
    "\004\037\074\001\002\000\004\022\015\001\002\000\032" +
    "\006\017\007\025\010\024\011\016\012\030\013\031\014" +
    "\027\015\032\016\021\017\026\042\020\044\022\001\002" +
    "\000\032\006\017\007\025\010\024\011\016\012\030\013" +
    "\031\014\027\015\032\016\021\017\026\042\020\044\022" +
    "\001\002\000\032\006\017\007\025\010\024\011\016\012" +
    "\030\013\031\014\027\015\032\016\021\017\026\042\020" +
    "\044\022\001\002\000\034\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\022\uffdd\042\uffdd\044\uffdd\001\002\000\034\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\022\uffd9\042\uffd9\044\uffd9\001\002\000" +
    "\034\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\017\uffde\022\uffde\042\uffde\044" +
    "\uffde\001\002\000\004\022\037\001\002\000\032\006\017" +
    "\007\025\010\024\011\016\012\030\013\031\014\027\015" +
    "\032\016\021\017\026\042\020\044\022\001\002\000\032" +
    "\006\017\007\025\010\024\011\016\012\030\013\031\014" +
    "\027\015\032\016\021\017\026\042\020\044\022\001\002" +
    "\000\034\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8\042\uffd8" +
    "\044\uffd8\001\002\000\034\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\022\uffdb\042\uffdb\044\uffdb\001\002\000\032\006\017\007" +
    "\025\010\024\011\016\012\030\013\031\014\027\015\032" +
    "\016\021\017\026\042\020\044\022\001\002\000\034\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\022\uffdc\042\uffdc\044\uffdc\001" +
    "\002\000\034\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\022\uffda\042" +
    "\uffda\044\uffda\001\002\000\032\006\017\007\025\010\024" +
    "\011\016\012\030\013\031\014\027\015\032\016\021\017" +
    "\026\042\020\044\022\001\002\000\034\006\uffe3\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\022\uffe3\042\uffe3\044\uffe3\001\002\000\034" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\022\uffdf\042\uffdf\044\uffdf" +
    "\001\002\000\034\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\022\uffe1" +
    "\042\uffe1\044\uffe1\001\002\000\004\026\040\001\002\000" +
    "\004\035\042\001\002\000\006\005\053\022\055\001\002" +
    "\000\004\042\043\001\002\000\004\020\044\001\002\000" +
    "\004\027\045\001\002\000\004\020\046\001\002\000\004" +
    "\030\047\001\002\000\004\020\050\001\002\000\004\031" +
    "\051\001\002\000\004\036\052\001\002\000\006\005\uffd7" +
    "\022\uffd7\001\002\000\010\023\uffd6\025\uffd6\044\uffd6\001" +
    "\002\000\010\023\uffe4\025\uffe4\044\uffe4\001\002\000\004" +
    "\024\056\001\002\000\004\033\057\001\002\000\004\042" +
    "\061\001\002\000\004\034\067\001\002\000\004\022\062" +
    "\001\002\000\004\026\063\001\002\000\004\035\042\001" +
    "\002\000\004\005\065\001\002\000\006\034\uffd3\042\061" +
    "\001\002\000\004\034\uffd4\001\002\000\004\005\070\001" +
    "\002\000\010\023\uffd5\025\uffd5\044\uffd5\001\002\000\032" +
    "\006\017\007\025\010\024\011\016\012\030\013\031\014" +
    "\027\015\032\016\021\017\026\042\020\044\022\001\002" +
    "\000\034\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\022\uffe2\042\uffe2" +
    "\044\uffe2\001\002\000\034\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\022\uffe0\042\uffe0\044\uffe0\001\002\000\004\044\075\001" +
    "\002\000\004\022\076\001\002\000\040\005\105\006\115" +
    "\007\103\010\113\011\114\012\107\020\120\033\077\034" +
    "\116\035\104\036\102\037\101\040\111\041\100\043\110" +
    "\001\002\000\010\005\uffe6\020\uffe6\021\uffe6\001\002\000" +
    "\006\020\ufff3\021\136\001\002\000\010\005\uffe9\020\uffe9" +
    "\021\uffe9\001\002\000\010\005\uffee\020\uffee\021\uffee\001" +
    "\002\000\010\005\uffec\020\uffec\021\uffec\001\002\000\010" +
    "\005\uffef\020\uffef\021\uffef\001\002\000\010\005\uffe8\020" +
    "\uffe8\021\uffe8\001\002\000\004\005\135\001\002\000\010" +
    "\005\ufff0\020\ufff0\021\ufff0\001\002\000\006\020\ufff4\021" +
    "\133\001\002\000\010\005\ufff1\020\ufff1\021\ufff1\001\002" +
    "\000\006\020\ufff2\021\131\001\002\000\010\005\uffed\020" +
    "\uffed\021\uffed\001\002\000\010\005\uffe7\020\uffe7\021\uffe7" +
    "\001\002\000\010\005\uffea\020\uffea\021\uffea\001\002\000" +
    "\010\005\uffe5\020\uffe5\021\uffe5\001\002\000\004\020\121" +
    "\001\002\000\010\005\uffeb\020\uffeb\021\uffeb\001\002\000" +
    "\040\005\105\006\115\007\103\010\113\011\114\012\107" +
    "\020\120\033\077\034\116\035\104\036\102\037\101\040" +
    "\111\041\122\043\124\001\002\000\006\005\ufff3\020\ufff3" +
    "\001\002\000\004\005\ufff7\001\002\000\006\005\ufff4\020" +
    "\ufff4\001\002\000\006\005\ufff2\020\ufff2\001\002\000\006" +
    "\005\ufff5\020\127\001\002\000\040\005\105\006\115\007" +
    "\103\010\113\011\114\012\107\020\120\033\077\034\116" +
    "\035\104\036\102\037\101\040\111\041\122\043\124\001" +
    "\002\000\004\005\ufff6\001\002\000\034\005\105\006\115" +
    "\007\103\010\113\011\114\012\107\020\120\033\077\034" +
    "\116\035\104\036\102\037\101\040\111\001\002\000\004" +
    "\005\ufffa\001\002\000\004\043\134\001\002\000\004\005" +
    "\ufff8\001\002\000\010\023\ufffb\025\ufffb\044\ufffb\001\002" +
    "\000\004\041\137\001\002\000\004\005\ufff9\001\002\000" +
    "\004\004\156\001\002\000\004\022\142\001\002\000\032" +
    "\006\017\007\025\010\024\011\016\012\030\013\031\014" +
    "\027\015\032\016\021\017\026\042\020\044\022\001\002" +
    "\000\004\022\144\001\002\000\004\032\145\001\002\000" +
    "\004\035\146\001\002\000\004\027\147\001\002\000\004" +
    "\020\150\001\002\000\004\030\151\001\002\000\004\020" +
    "\152\001\002\000\004\031\153\001\002\000\004\036\154" +
    "\001\002\000\004\005\155\001\002\000\004\004\uffd2\001" +
    "\002\000\004\002\000\001\002\000\004\025\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\004\002\004\001\001\000\012\003\007\004" +
    "\006\005\011\012\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\156\004\006\005\011\012\010\001" +
    "\001\000\004\016\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\022\001\001\000\004\017\072\001\001\000\004\017\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\035\001\001\000\004" +
    "\017\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\040" +
    "\001\001\000\004\014\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\063\001\001\000\002\001\001\000\004\015" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\105\010\116\011\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\122\010\125\011\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\127\010\125\011" +
    "\124\001\001\000\002\001\001\000\004\011\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    Vector recuperables = new Vector(10,50);
    Vector noRecuperables = new Vector(10,50);
    Vector expresiones = new Vector(10,50);
    Vector nombreExpresiones = new Vector(10,50); 
    Vector elementosG = new Vector(10,50); 

/* Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
System.out.println("Error en la Linea " + (s.right+1) + " Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
recuperables.addElement(s.value);
}

/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
System.out.println("Error irrecuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
noRecuperables.addElement(s.value);
} 
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {

  int contador = 0; 



  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= tDoblePor EXP1 ERROR tDoblePor 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EXP1 ::= EXP2 EXP1 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP1",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EXP1 ::= EXP2 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP1",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EXP2 ::= DEF 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXP2 ::= CONJ 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONJ ::= tConj tDosPts tId tFlecha OPCONJ tPuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONJ",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPCONJ ::= ASCII tSeparadorC ASCII 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPCONJ ::= tLetra tSeparadorC tLetra 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPCONJ ::= tNumero tSeparadorC tNumero 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPCONJ ::= OPCONJ1 tComa OPCOMA 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPCOMA ::= OPCONJ1 tComa OPCOMA 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMA",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPCOMA ::= OPCONJ1 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCOMA",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPCONJ1 ::= tNumero 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ1",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPCONJ1 ::= tLetra 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ1",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPCONJ1 ::= ASCII 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPCONJ1",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASCII ::= tAscii 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASCII ::= tOr 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASCII ::= tParentesisA 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASCII ::= tParentesisC 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASCII ::= tPor 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASCII ::= tUnoMas 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASCII ::= tComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASCII ::= tConcatenacion 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASCII ::= tDosPts 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASCII ::= tPuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASCII ::= tCeroUno 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ASCII ::= tLlaveA 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASCII ::= tLlaveC 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASCII",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEF ::= tId tFlecha REGULAR tFlecha tRetorno RETORNO FINAL 
            {
              String RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		String B = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		 System.out.println(A.ExpReg.getClass()); expresiones.addElement(A.ExpReg); nombreExpresiones.addElement(B); elementosG.addElement(A.elementos); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEF",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REGULAR ::= tOr REGULAR REGULAR 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Expresion B = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 OR nuevo = new OR(); RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; nuevo.transicion5=B.ExpReg; RESULT.ExpReg = nuevo; RESULT.copiar(A.elementos); RESULT.copiar(B.elementos); RESULT.addEG(A.ExpReg); RESULT.addEG(B.ExpReg); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // REGULAR ::= tConcatenacion REGULAR REGULAR 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int Bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Expresion B = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 CONCAT nuevo = new CONCAT(); RESULT = new Expresion(); nuevo.transicion1=A.ExpReg; nuevo.transicion2=B.ExpReg; RESULT.ExpReg = nuevo; RESULT.copiar(A.elementos); RESULT.copiar(B.elementos); RESULT.addEG(A.ExpReg); RESULT.addEG(B.ExpReg); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // REGULAR ::= tPor REGULAR 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 CEROMAS nuevo = new CEROMAS(); RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; RESULT.ExpReg = nuevo; RESULT.elementos = A.elementos; RESULT.addEG(A.ExpReg); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // REGULAR ::= tCeroUno REGULAR 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 CEROUNO nuevo = new CEROUNO(); RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; RESULT.ExpReg = nuevo; RESULT.elementos = A.elementos; RESULT.addEG(A.ExpReg); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // REGULAR ::= tUnoMas REGULAR 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Expresion A = (Expresion)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 UNOMAS nuevo = new UNOMAS();   RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; RESULT.ExpReg = nuevo; RESULT.elementos = A.elementos; RESULT.addEG(A.ExpReg); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // REGULAR ::= tId 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // REGULAR ::= tCadena 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // REGULAR ::= tSaltoLinea 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // REGULAR ::= tComillaS 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // REGULAR ::= tTab 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // REGULAR ::= tComillaD 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // REGULAR ::= tTodoV 
            {
              Expresion RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String A = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Expresion(); RESULT.ExpReg = A; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("REGULAR",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RETORNO ::= tParentesisA tCadena tComa tYyText tComa tYyRow tComa tYyCol tParentesisC 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RETORNO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FINAL ::= tPuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FINAL ::= tFlecha tReserv tLlaveA CONTENIDO tLlaveC tPuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FINAL",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONTENIDO ::= tCadena tFlecha tRetorno RETORNO tPuntoComa CONTENIDO 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONTENIDO ::= tCadena tFlecha tRetorno RETORNO tPuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ERROR ::= tError tFlecha REGULAR tFlecha terrorM tParentesisA tYyText tComa tYyRow tComa tYyCol tParentesisC tPuntoComa 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ERROR",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
