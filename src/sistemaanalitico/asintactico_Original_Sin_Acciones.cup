package sistemaanalitico;

import java_cup.runtime.Symbol;
import java.util.Vector;

parser code
{:
    // Errores Recuperables
    Vector recuperables = new Vector(10,50);
    Vector lineaRecuperables = new Vector (10,50);
    Vector columnaRecuperables = new Vector(10,50);
    // errores no recuperables
    Vector noRecuperables = new Vector(10,50);
    Vector lineaNoRecuperables = new Vector (10,50);
    Vector columnaNoRecuperables = new Vector(10,50);
    
    // elementos metodo thompson y cerradura
    Vector expresiones = new Vector(10,50);
    Vector nombreExpresiones = new Vector(10,50); 
    Vector elementosG = new Vector(10,50);

    // conjuntos
    Vector ConjExp = new Vector(10,50);

    //nombre de tokens
    Vector tokensName = new Vector(10,50);

/* Metodo al que se llama automaticamente ante algun error sintactico.*/
public void syntax_error(Symbol s){
    System.out.println("Error en la Linea " + (s.right+1) + " Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    recuperables.addElement(s.value);
    lineaRecuperables.addElement(s.right+1);
    columnaRecuperables.addElement(s.left);
}

/**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error irrecuperable en la Linea " + (s.right+1)+ " Columna "+s.left+". Identificador " + s.value + " no reconocido.");
    noRecuperables.addElement(s.value);
    lineaNoRecuperables.addElement(s.right+1);
    columnaNoRecuperables.addElement(s.left);
} 
    
:}

action code 
{:  int contador = 0; 


:}


/*************************************************** DEFINICION DE TERMINALELS ***********************************************************/

terminal String         tDoblePor
,tPuntoComa
,tConcatenacion
,tUnoMas
,tPor
,tCeroUno
,tOr
,tSaltoLinea
,tComillaS
,tTab
,tComillaD
,tTodoV
,tComa
,tSeparadorC
,tFlecha
,tConj
,tReserv
,tRetorno
,tYyText
,tYyRow
,tYyCol
,terrorM
,tLlaveA
,tLlaveC
,tParentesisA
,tParentesisC
,tDosPts
,tAscii
,tLetra
,tCadena
,tNumero
,tId;


/*************************************************** DEFINICION DE NO TERMINALELS ********************************************************/
   
non terminal String  S
,EXP1
,EXP2
,CONJ
,OPCONJ1
,ASCII
,DEF
,RETORNO
,ERROR;

non terminal Def FINAL, CONTENIDO;
non terminal Conjuntos OPCOMA, OPCONJ;
non terminal Expresion REGULAR;


/***************************************************** PRECEDENCIA Y ASOCITIVIDAD ********************************************************/

precedence left tOr;
precedence left tConcatenacion;
precedence left tUnoMas, tPor, tCeroUno;
precedence left tParentesisA;

/*************************************************************** GRAMATICA ****************************************************************/


start with					S
                            ;

S::=                        tDoblePor EXP1 tDoblePor
                            ;

EXP1::=                     EXP2 EXP1 
                            | EXP2     
                            ;                       

EXP2::=                     DEF
                            |CONJ
                            |ERROR 
                            | error tPuntoComa EXP2                         
                            ;

CONJ::=                     tConj tDosPts tId:A tFlecha OPCONJ:B tPuntoComa {:B.nombre = A; ConjExp.addElement(B); :}
                            ;

OPCONJ::=                   ASCII:A tSeparadorC ASCII:B         {:RESULT = new Conjuntos(); RESULT.conjRaya.addElement(A); RESULT.conjRaya.addElement(B); :}
                            |tLetra:A tSeparadorC tLetra:B      {:RESULT = new Conjuntos(); RESULT.conjRaya.addElement(A); RESULT.conjRaya.addElement(B); :}
                            |tNumero:A tSeparadorC tNumero:B    {:RESULT = new Conjuntos(); RESULT.conjRaya.addElement(A); RESULT.conjRaya.addElement(B); :}
                            |OPCONJ1:A tComa OPCOMA:B           {:RESULT = new Conjuntos(); RESULT.conjComa.addElement(A); for (int i = 0;i<B.conjComa.size(); i++ ) { if (!RESULT.conjComa.contains(B.conjComa.elementAt(i))) { RESULT.conjComa.addElement(B.conjComa.elementAt(i)); } }:}
                            ;

OPCOMA::=                   OPCONJ1:A tComa OPCOMA:B        {:RESULT = new Conjuntos(); RESULT.conjComa.addElement(A); for (int i = 0;i<B.conjComa.size(); i++ ) { if (!RESULT.conjComa.contains(B.conjComa.elementAt(i))) { RESULT.conjComa.addElement(B.conjComa.elementAt(i)); } }  :}
                            |OPCONJ1:A                      {:RESULT = new Conjuntos(); RESULT.conjComa.addElement(A); :}
                            ;

OPCONJ1::=                  tNumero:A               {:RESULT = A; :}
                            |tLetra:A               {:RESULT = A; :}
                            |ASCII:A                {:RESULT = A; :}
                            ;

ASCII::=                    tAscii:A                {:RESULT = A; :}
                            |tOr:A                  {:RESULT = A; :}
                            |tParentesisA:A         {:RESULT = A; :}
                            |tParentesisC:A         {:RESULT = A; :}
                            |tPor:A                 {:RESULT = A; :}
                            |tUnoMas:A              {:RESULT = A; :}
                            |tComa:A                {:RESULT = A; :}
                            |tConcatenacion:A       {:RESULT = A; :}
                            |tDosPts:A              {:RESULT = A; :}
                            |tPuntoComa:A           {:RESULT = A; :}
                            |tCeroUno:A             {:RESULT = A; :}
                            |tLlaveA:A              {:RESULT = A; :}
                            |tLlaveC:A              {:RESULT = A; :}
                            ;


DEF::=                      tId:B tFlecha REGULAR:A tFlecha tRetorno RETORNO:C FINAL:D {: System.out.println(A.ExpReg.getClass()); expresiones.addElement(A.ExpReg); nombreExpresiones.addElement(B); elementosG.addElement(A.elementos); D.retXdef = C; tokensName.addElement(D); :}                            
                            ;

REGULAR::=                   tOr REGULAR:A REGULAR:B                {: OR nuevo = new OR(); RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; nuevo.transicion5=B.ExpReg; RESULT.ExpReg = nuevo; RESULT.copiar(A.elementos); RESULT.copiar(B.elementos); RESULT.addEG(A.ExpReg); RESULT.addEG(B.ExpReg); :}
                            |tConcatenacion REGULAR:A REGULAR:B     {: CONCAT nuevo = new CONCAT(); RESULT = new Expresion(); nuevo.transicion1=A.ExpReg; nuevo.transicion2=B.ExpReg; RESULT.ExpReg = nuevo; RESULT.copiar(A.elementos); RESULT.copiar(B.elementos); RESULT.addEG(A.ExpReg); RESULT.addEG(B.ExpReg); :}
                            |tPor REGULAR:A                         {: CEROMAS nuevo = new CEROMAS(); RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; RESULT.ExpReg = nuevo; RESULT.elementos = A.elementos; RESULT.addEG(A.ExpReg); :}
                            |tCeroUno REGULAR:A                     {: CEROUNO nuevo = new CEROUNO(); RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; RESULT.ExpReg = nuevo; RESULT.elementos = A.elementos; RESULT.addEG(A.ExpReg); :}
                            |tUnoMas REGULAR:A                      {: UNOMAS nuevo = new UNOMAS();   RESULT = new Expresion(); nuevo.transicion2=A.ExpReg; RESULT.ExpReg = nuevo; RESULT.elementos = A.elementos; RESULT.addEG(A.ExpReg); :}                     
                            |tId:A                                  {: RESULT = new Expresion(); RESULT.ExpReg = A; :}
                            |tCadena:A                              {: RESULT = new Expresion(); RESULT.ExpReg = A; :}
                            |tSaltoLinea:A                          {: RESULT = new Expresion(); RESULT.ExpReg = A; :}
                            |tComillaS:A                            {: RESULT = new Expresion(); RESULT.ExpReg = A; :}
                            |tTab:A                                 {: RESULT = new Expresion(); RESULT.ExpReg = A; :}
                            |tComillaD:A                            {: RESULT = new Expresion(); RESULT.ExpReg = A; :}
                            |tTodoV:A                               {: RESULT = new Expresion(); RESULT.ExpReg = A; :}
                            ;

RETORNO::=                  tParentesisA tCadena:A tComa tYyText tComa tYyRow tComa tYyCol tParentesisC {:RESULT = A; :}
                            ;

FINAL::=                    tPuntoComa                                                      {:RESULT = new Def(); :}
                            |tFlecha tReserv tLlaveA CONTENIDO:A tLlaveC tPuntoComa         {:RESULT = new Def(); RESULT = A; :}
                            ;

CONTENIDO::=                tCadena:A tFlecha tRetorno RETORNO:B tPuntoComa CONTENIDO:C     {:RESULT = new Def(); RESULT = C; RESULT.retRes.addElement(B); RESULT.texto.addElement(A); :}
                            |tCadena:A tFlecha tRetorno RETORNO:B tPuntoComa                {:RESULT = new Def(); RESULT.retRes.addElement(B); RESULT.texto.addElement(A); :}
                            ;

ERROR::=                    tId:B tFlecha REGULAR:A tFlecha terrorM tParentesisA tYyText tComa tYyRow tComa tYyCol tParentesisC tPuntoComa {: System.out.print(A.ExpReg.getClass()); System.out.println(A.ExpReg); expresiones.addElement(A.ExpReg); nombreExpresiones.addElement(B); elementosG.addElement(A.elementos); :}
                            ;